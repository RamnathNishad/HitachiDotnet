Errors types:
1) Compilation errors:- syntax errors and detected by the compiler
2) Logical errors:- Runtime errors and it shows output which is 
not the desired due to mistake in the logic.
We find it using Test cases :
	input--->actual output vs expected output
debugging options are used to trace the point where errors are
coming. for e.g. we can use break points in Visual Studio in debug 
mode.
3) Exceptions:- These are situations when the program behaves 
abnormal and terminates event though logic and syntaxes are correct.
for e.g. Divide By Zero exception

When exception occurs, runtime will wrapped the error details
into an exception object and throws it to be handled.
Using try/catch/finally block exceptions are handle.

if not handled, program terminates there itself.

------Custom or User-Defined exceptions-------------
SystemException used by pre-defined exception
ApplicationException used by Custom exception



===========Asynchronous execution using async and await=====
How async and await work:
-The async modifier signals to the compiler that the method is 
asynchronous.
The await operator is used to await the task when encountered.
-The task continues running in the background 
-Once the task completes, the method resumes

Asynchronous programming enables non-blocking code execution.
-Improves responsiveness in UI applications or web servers.
-Frees up resources while waiting for I/O-bound or long-running 
operations.




Delegates:- It is used to bind methods at runtime and invoke them
even though the objects are not having relations like inheritnce 
and overriding.

It can be compared with function pointers which stores references
of methods to invoked dynmaically.

-It is more safer in the sense, it can bind only a particular 
signature followed by the methods specified during declaration
of the delegate type.

-It can be a single-cast delegate or multi-cast delegate.
Single-cast binds only one method at a time whereas multi-cast binds
more than one methods and all can be invoked with single call.

-Delegates are commonly used in callbacks scenarios for e.g. 
event-handling or notifications in asynchronouse execution model.

-Delegate can callback or invoke private methods also.
 
 3 steps:
 -declare :- what signature of methods the delegate can bind
 -intialize:- bind the method(s) which to be invoked
 -invoke:- call the binded method(s)

 *use multi-cast delegate for void return type methods as it will
 only give the last method result.

 * we can also bind anonymous methods with delegate


 *generic pre-defined delegates are there for multiple arguments
 it can support upto 16 variable arguments
 -Action<>
 -Func<>

 var: implicit-typing as per assigned value. It is not dynamic type.
 -we must declare and assigned in the single statement
 -we cannot use var for method arguments
 public var Add(var a,var b) //invalid
 {
 
 }
 -we cannot use var as a method return type
 -we cannot use var for class fields 

 Collections :- unlike array they don't have fixed size
 1) Non-generics:- weakly-typed(System.Object) and variable size
 2) Generics:- Strongly-typed and variable size

 System.Collections
	-ArrayList
	-Hashtable
 System.Collections.Generic
	List<>
	Dictionary<,>
	SortedDictionary<,>
	Stack<>
	Queue<>



 





 LINQ(Language Integrated Query)
 -SQL---SQL Queries
 -Xml---XQuery
 -Objects(Collections)

 LINQ+EF => DML + Query

 System.Linq

 Two syntax=>
 1) using extension methods:-  
 2) using operators:-select, from , and, where etc

 ================SOLID Principles=================
 1) S-->SRP : Single Responsibility Principle
 A method or a class must be responsible for only one task.


 2) O--->Open/Closed Principle:- a class should be opened for 
 extension but closed for modifications.

 ----Customer----Regular(10% discount),Gold(20%),Silver(15%)
 if customer types are added more then it will require code to be
 modified to accomodate new type of customers.

 3) L---->Liskov Substitution Principle:- Objects of a base class 
 should replaceable with objects of derived without altering the
 base class features.
	a subclass should not remove the features of its base class 
	rather it shud extends base class features.

	class Hyudai
	{
		int maxSpeed;
	}

	class HyundaiPlus : Hyudai
	{
		int maxSpeed;
	}

4) I----->Interface Seggregation Principle

Employee

interface IEmployee
{
  void Register();
}

interface IManager : IEmployee
{
  void DesignProject();
  void SetTarget();
}
interface IAccountant : IEmployee
{
	void TaxFiling();
}


Manager----DesignProject,SetTarget
Accountant---TaxFiling

class Manager :IManager
{
	public void DesignTarget(){}
	public void SetTarget(){}
}
class Accountant : IAccountant
{
	public void TaxFiling(){}
}

D---->Dependency Principle
-High level modules should not depend on low-level modules directly.
Both should depend on abstractions.
-Abstraction should not depend on details.
-Details should depend on abstraction

Design Patterns:-
1) SingleTon pattern:-  Only one instance of an object is created
throughout the application.

2) Factory pattern:- based of the information provided, different types
of objects are created using factory pattern(open/closed principle used above)

3) Adapter pattern:- If u want to communicate between two incompatible
types, we use this pattern using an Adapter interface.
It is more of tranlator between two different types.

Type1--------Adapter interface(type2 fn)----Type2(fn)

4) Facade pattern:- If there is a complex interface is there, we
can use facade pattern to have a simplified interface to communicate 
the object.
e.g. OS low level complex interface is used using a facade simple
interface by shell command prompt.


5) Flyweight pattern:- It works on caching the object with common
features which may be needed at multiple places.

object----f1,f2,f3 (char with some font,style,color)

6) Proxy pattern:- it is used in web service communication where
client feels that it is using service directly but infact local proxy
instance is used. Target object is communicated through proxy.

7) Decorator pattern:- If multiple similar functionalities are 
needed for more than one type of object, then instead of redfining 
again and agin in all types, we can create a decorator type in the
main type only once.

class Decorator
{
//F1
//F2
//F3
}
classA
{
	//Decorator 
}
classB
{
 //Decorator
}





















